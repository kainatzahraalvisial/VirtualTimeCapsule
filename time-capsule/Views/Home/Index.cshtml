@{
    ViewData["Title"] = "Home";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<main role="main" class="flex-grow-1">
    <section class="hero-section position-relative">
        <div id="three-container" class="position-absolute top-0 start-0 w-100" style="height: auto;"></div>
        <div class="container d-flex justify-content-between align-items-center z-1">
            <div class="text-left" style="max-width: 50%;">
                <h1 class="display-3 fw-bold cosmic-text">
                    <span>E</span><span>m</span><span>b</span><span>a</span><span>r</span><span>k</span><span> </span>
                    <span>o</span><span>n</span><span> </span><span>a</span><span> </span>
                    <span>C</span><span>o</span><span>s</span><span>m</span><span>i</span><span>c</span><span> </span>
                    <span>J</span><span>o</span><span>u</span><span>r</span><span>n</span><span>e</span><span>y</span><span>—</span>
                    <span>S</span><span>e</span><span>a</span><span>l</span><span> </span>
                    <span>Y</span><span>o</span><span>u</span><span>r</span><span> </span>
                    <span>M</span><span>e</span><span>m</span><span>o</span><span>r</span><span>i</span><span>e</span><span>s</span><span> </span>
                    <span>i</span><span>n</span><span> </span>
                    <span>t</span><span>h</span><span>e</span><span> </span>
                    <span>S</span><span>t</span><span>a</span><span>r</span><span>s</span><span>!</span>
                </h1>
                <p class="lead cosmic-subtext">Craft a Digital Time Capsule, Lock It in the Galaxy, and Rediscover Your Past in the Future.</p>
                <a href="#" class="btn cosmic-button mt-3 mb-5">Create Capsule Now</a>
            </div>
            <div id="capsule-container" style="width: 50%; height: 100%; position: absolute; right: 0; top: 0;"></div>
        </div>
    </section>
</main>

<style>
    .hero-section {
        position: relative;
        background: transparent;
        overflow: hidden;
        z-index: 1;
        padding-top: 80px; /* Push content below navbar */
        padding-bottom: 100px; /* Ensure space below content */
    }

    #three-container {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: auto; /* Adjusted to content height */
        z-index: -1;
    }

        #three-container canvas {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
        }

    #capsule-container {
        position: absolute;
        right: 0;
        top: 0;
        width: 50%;
        height: 100%;
    }

    .cosmic-text {
        font-weight: 900;
        background: linear-gradient(90deg, #ff00ff, #00ffff, #ff00ff);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        text-shadow: 0 0 5px rgba(0, 255, 255, 0.2);
        opacity: 0; /* Start hidden for fade-in */
        transition: opacity 2s ease;
    }

    .cosmic-subtext {
        color: #ddd;
        text-shadow: 0 0 3px rgba(255, 255, 255, 0.1);
        opacity: 0; /* Start hidden for fade-in */
        transition: opacity 2s ease;
    }
</style>

@section Scripts {
    <script type="module">
        import * as THREE from 'three';
        import { FBXLoader } from 'three/addons/loaders/FBXLoader.js';

        // Scene for stars (full screen)
        const starScene = new THREE.Scene();
        starScene.background = new THREE.Color(0x000000);
        const starCamera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        const starRenderer = new THREE.WebGLRenderer({ alpha: true });
        const starContainer = document.getElementById('three-container');

        if (!starContainer) {
            console.error("Star container not found!");
        } else {
            const sectionHeight = document.querySelector('.hero-section').offsetHeight;
            starRenderer.setSize(window.innerWidth, sectionHeight); // Set height to .hero-section height
            starContainer.appendChild(starRenderer.domElement);
            console.log("Star renderer initialized and appended to container with height:", sectionHeight);
        }

        // Scene for capsule (right half)
        const capsuleScene = new THREE.Scene();
        const capsuleCamera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000);
        const capsuleRenderer = new THREE.WebGLRenderer({ alpha: true });
        const capsuleContainer = document.getElementById('capsule-container');

        if (!capsuleContainer) {
            console.error("Capsule container not found!");
        } else {
            const containerRect = capsuleContainer.getBoundingClientRect();
            capsuleRenderer.setSize(containerRect.width, containerRect.height);
            capsuleContainer.appendChild(capsuleRenderer.domElement);
            capsuleCamera.aspect = containerRect.width / containerRect.height;
            capsuleCamera.updateProjectionMatrix();
            console.log("Capsule renderer initialized and appended to container.");
        }

        // Stars setup
        const starGeometry = new THREE.BufferGeometry();
        const starCount = 5000;
        const positions = new Float32Array(starCount * 3);
        const colors = new Float32Array(starCount * 3);
        for (let i = 0; i < starCount * 3; i += 3) {
            positions[i] = (Math.random() - 0.5) * 2000;
            positions[i + 1] = (Math.random() - 0.5) * 2000;
            positions[i + 2] = (Math.random() - 0.5) * 2000;
            colors[i] = Math.random();
            colors[i + 1] = Math.random();
            colors[i + 2] = 1;
        }
        starGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
        starGeometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));
        const starMaterial = new THREE.PointsMaterial({ size: 2, vertexColors: true, transparent: true });
        const stars = new THREE.Points(starGeometry, starMaterial);
        starScene.add(stars);
        console.log("Stars added to scene.");

        // Capsule setup
        const fbxLoader = new FBXLoader();
        let capsule;
        fbxLoader.load(
            '/models/capsule.fbx',
            (object) => {
                console.log("Capsule model loaded successfully.");
                capsule = object;
                capsule.scale.set(1.0, 1.0, 1.0);
                capsule.position.set(0, 0, 0);

                const mainMaterial = new THREE.MeshStandardMaterial({
                    color: 0x333333,
                    metalness: 0.9,
                    roughness: 0.1,
                    emissive: 0x111111,
                    emissiveIntensity: 0.5
                });

                const glowMaterial = new THREE.MeshStandardMaterial({
                    color: 0x00ffff,
                    metalness: 0.8,
                    roughness: 0.1,
                    emissive: 0x00ffff,
                    emissiveIntensity: 5.0,
                    transparent: false,
                    opacity: 1.0
                });

                const middleMaterial = new THREE.MeshStandardMaterial({
                    color: 0x00ffff,
                    metalness: 0.3,
                    roughness: 0.2,
                    emissive: 0x00ffff,
                    emissiveIntensity: 1.0,
                    transparent: true,
                    opacity: 0.3
                });

                const cubeMaterial = new THREE.MeshStandardMaterial({
                    color: 0x00ffff,
                    emissive: 0x00ffff,
                    emissiveIntensity: 5.0,
                    transparent: true,
                    opacity: 0.9
                });

                capsule.traverse((child) => {
                    if (child.isMesh) {
                        console.log("Mesh name:", child.name);
                        if (child.name === 'Capsule') {
                            child.material = mainMaterial;
                        } else if (child.name === 'Cube') {
                            child.material = cubeMaterial;
                        } else if (child.name === 'glass') {
                            child.material = middleMaterial;
                        }
                    }
                });

                const haloTexture = new THREE.CanvasTexture(generateHaloTexture());
                const haloMaterial = new THREE.SpriteMaterial({
                    map: haloTexture,
                    color: 0x00ffff,
                    transparent: true,
                    opacity: 0.5
                });
                const halo = new THREE.Sprite(haloMaterial);
                halo.scale.set(100, 100, 1);
                halo.position.set(0, 0, 0);
                capsuleScene.add(halo);

                const cube = new THREE.Mesh(new THREE.BoxGeometry(5, 5, 5), cubeMaterial);
                cube.position.set(0, 0, 0);
                capsuleScene.add(cube);
                console.log("Cube added to scene.");

                capsuleScene.add(capsule);
                console.log("Capsule added to scene.");

                gsap.to(capsule.position, {
                    y: 5,
                    duration: 2,
                    repeat: -1,
                    yoyo: true,
                    ease: "sine.inOut"
                });
                gsap.to(cube.position, {
                    y: 5,
                    duration: 2,
                    repeat: -1,
                    yoyo: true,
                    ease: "sine.inOut"
                });
            },
            (xhr) => {
                console.log((xhr.loaded / xhr.total * 100) + '% loaded');
            },
            (error) => {
                console.error('Failed to load FBX model:', error);
            }
        );

        const ambientLight = new THREE.AmbientLight(0xffffff, 0.05);
        capsuleScene.add(ambientLight);
        const pointLight = new THREE.PointLight(0x00ffff, 5.0, 200);
        pointLight.position.set(0, 0, 50);
        capsuleScene.add(pointLight);
        console.log("Lights added to capsule scene.");

        starCamera.position.set(0, 0, 120);
        console.log("Star camera positioned at:", starCamera.position);
        starCamera.lookAt(0, 0, 0);

        capsuleCamera.position.set(0, 0, 120);
        console.log("Capsule camera positioned at:", capsuleCamera.position);
        capsuleCamera.lookAt(0, 0, 0);

        let mouseX = 0, mouseY = 0;
        $(document).on('mousemove', (e) => {
            mouseX = (e.clientX / window.innerWidth) * 2 - 1;
            mouseY = -(e.clientY / window.innerHeight) * 2 + 1;
        });

        // Fade-in animation for the entire text
        document.addEventListener('DOMContentLoaded', () => {
            const text = document.querySelector('.cosmic-text');
            const subtext = document.querySelector('.cosmic-subtext');
            if (text && subtext) {
                gsap.to([text, subtext], {
                    opacity: 1, // Fade to fully visible
                    duration: 2, // 2 seconds for a smooth fade
                    ease: "power2.out", // Smooth easing
                    onComplete: () => {
                        text.style.opacity = '1';
                        subtext.style.opacity = '1';
                    }
                });
            } else {
                console.warn("Text or subtext element not found for animation.");
            }
        });

        function animate() {
            requestAnimationFrame(animate);
            stars.rotation.y += 0.001;
            stars.rotation.x += mouseY * 0.005;
            stars.rotation.y += mouseX * 0.005;
            starRenderer.render(starScene, starCamera);
            capsuleRenderer.render(capsuleScene, capsuleCamera);
        }
        animate();
        console.log("Animation loop started.");

        window.addEventListener('resize', () => {
            const sectionHeight = document.querySelector('.hero-section').offsetHeight;
            starCamera.aspect = window.innerWidth / sectionHeight;
            starCamera.updateProjectionMatrix();
            starRenderer.setSize(window.innerWidth, sectionHeight); // Update height on resize

            const containerRect = capsuleContainer.getBoundingClientRect();
            capsuleCamera.aspect = containerRect.width / containerRect.height;
            capsuleCamera.updateProjectionMatrix();
            capsuleRenderer.setSize(containerRect.width, containerRect.height);
        });

        function generateHaloTexture() {
            const size = 256;
            const canvas = document.createElement('canvas');
            canvas.width = size;
            canvas.height = size;
            const context = canvas.getContext('2d');
            const gradient = context.createRadialGradient(size / 2, size / 2, 0, size / 2, size / 2, size / 2);
            gradient.addColorStop(0, 'rgba(255, 255, 255, 1)');
            gradient.addColorStop(1, 'rgba(255, 255, 255, 0)');
            context.fillStyle = gradient;
            context.fillRect(0, 0, size, size);
            return canvas;
        }
    </script>
}